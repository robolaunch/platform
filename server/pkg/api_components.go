/*
 * robolaunch Industry Cloud Platform - OpenAPI 3.0
 *
 * API for robolaunch ICP platform structure.
 *
 * API version: 1.0.11
 * Contact: info@robolaunch.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	"net/url"

	"github.com/gorilla/mux"
	"github.com/robolaunch/platform/server/pkg/models"
)

// *****PlatformComponents*****

func GetPlatformComponents(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(structToJSONByteArray(GetPlatformComponentsResponse(r.URL.Query())))
}

func GetPlatformComponentsResponse(queryParams url.Values) models.ResponsePlatformComponents {

	url := queryParams.Get("url")

	platformComponents, err := GetStructuredPlatformComponents(url)
	if err != nil {
		return models.ResponsePlatformComponents{
			Success: false,
			Message: err.Error(),
		}
	}

	return models.ResponsePlatformComponents{
		Success:  true,
		Message:  "All active components of the robolaunch ICP are listed.",
		Response: &platformComponents,
	}
}

// *****VersionedPlatformPlaneComponents*****

func GetVersionedPlatformPlaneComponents(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(structToJSONByteArray(GetVersionedPlatformPlaneComponentsResponse(mux.Vars(r), r.URL.Query())))
}

func GetVersionedPlatformPlaneComponentsResponse(pathParams map[string]string, queryParams url.Values) models.ResponsePlaneComponents {

	var version string
	var plane string
	url := queryParams.Get("url")

	if val, ok := pathParams["version"]; ok {
		version = val
	} else {
		return models.ResponsePlaneComponents{
			Success: false,
			Message: "Version is not identified in path.",
		}
	}

	if val, ok := pathParams["plane"]; ok {
		plane = val
	} else {
		return models.ResponsePlaneComponents{
			Success: false,
			Message: "Plane is not identified in path.",
		}
	}

	versionedPlatformPlaneComponents := models.PlaneComponents{}

	platformComponents, err := GetStructuredPlatformComponents(url)
	if err != nil {
		return models.ResponsePlaneComponents{
			Success: false,
			Message: err.Error(),
		}
	}

	if vpc, ok := platformComponents.Versions[version]; ok {
		if pc, ok2 := vpc[plane]; ok2 {
			versionedPlatformPlaneComponents = pc
		} else {
			return models.ResponsePlaneComponents{
				Success: false,
				Message: "Selected plane '" + plane + "' is not found for version " + version + ".",
			}
		}
	} else {
		return models.ResponsePlaneComponents{
			Success: false,
			Message: "Selected platform version '" + version + "' is not found.",
		}
	}

	return models.ResponsePlaneComponents{
		Success:  true,
		Message:  "Selected plane components are listed for an active/available version of the robolaunch ICP.",
		Response: &versionedPlatformPlaneComponents,
	}
}
